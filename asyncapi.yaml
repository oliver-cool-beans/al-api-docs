asyncapi: '2.2.0'

info:
  title: Adventure Land - The Code MMORPG
  version: "1.0"
  contact:
    name: Adventure Land
    url: http://www.adventure.land/
  description: |
    Unofficial Documentation for Adventure Land
    
    Want to contribute? Check out the [Github](https://github.com/oliver-cool-beans/al-api-docs)

    You can quickly play with the API using [wscat](https://github.com/websockets/wscat) like this:
    ```bash
    wscat -c "wss://eud1.adventure.land:8443/socket.io/?EIO=4&transport=websocket"
    ```

    
#
# Link to external docs
#
externalDocs:
  url: http://adventure.land/docs
    
#
# Details on how to connect to the application
#
servers:
  EU I:
    url: wss://eud1.adventure.land:2053
    protocol: wss
  EU II:
    url: wss://eud1.adventure.land:2083
    protocol: wss
  EU PVP: 
    url: wss://eud1.adventure.land:2087
    protocol: wss
  US I:
    url: wss://usd1.adventure.land:2053
    protocol: wss
  US II:
    url: wss://usd1.adventure.land:2083
    protocol: wss
  US III: 
    url: wss://usd1.adventure.land:2096
    protocol: wss
  US PVP: 
    url: wss://usd1.adventure.land:2087
    protocol: wss
  ASIA PVP: 
    url: wss://eud1.adventure.land:8443
    protocol: wss
#
# Details about all the channels that you can listen to or send to messages
#
channels:
  /:
    subscribe:
      summary: |
        Game events that can be subscribed to via `socket.on(eventName, (...args) => {})`
      message:
        oneOf:
          - $ref: '#/components/messages/welcome'
          - $ref: '#/components/messages/entities'
          - $ref: '#/components/messages/action'
          - $ref: '#/components/messages/sid'
          - $ref: '#/components/messages/hit'
          - $ref: '#/components/messages/ping_ack'
          - $ref: '#/components/messages/death'
          - $ref: '#/components/messages/server_info'
          - $ref: '#/components/messages/disappear'
          - $ref: '#/components/messages/disappearing_text'
          - $ref: '#/components/messages/new_map'
          - $ref: '#/components/messages/start'
          - $ref: '#/components/messages/upgrade'
          - $ref: '#/components/messages/ui'
          - $ref: '#/components/messages/lostandfound'
          - $ref: '#/components/messages/game_response'


    publish:
      summary: |
        Game messages that can be emitted via `socket.emit(eventName, (...args) => {})`
      message:
        oneOf:
          - $ref: '#/components/messages/exchange_buy'
          - $ref: '#/components/messages/ping_trig'
          - $ref: '#/components/messages/transport'
          - $ref: '#/components/messages/property'
          - $ref: '#/components/messages/move'
          - $ref: '#/components/messages/bank'
          - $ref: '#/components/messages/buy'
          - $ref: '#/components/messages/target'
          - $ref: '#/components/messages/lostandfound_info'
          - $ref: '#/components/messages/sbuy'
          - $ref: '#/components/messages/loaded'
          - $ref: '#/components/messages/auth'
          - $ref: '#/components/messages/craft'



#
# All reusable parts for readability and staying DRY
#
components:
  messages:
    craft: 
      name: craft
      summary: Craft an item
      payload:
        type: object
        properties: 
          items:
            description: first number in the array is the player backpack slot, and the second number being the crafting slot
            type: array
            minItems: 2
            items:
              type: number
            
    game_response:
      name: game_response
      summary: Responses to actions performed within the game
      payload:
        oneOf:
          - $ref: '#/components/schemas/game_response_lostandfound_donate'
          - $ref: '#/components/schemas/game_response_lostandfound_info'
          - $ref: '#/components/schemas/game_response_craft'
          #TODO Add more game responses!
    loaded:
      name: loaded
      summary: An event sent when the client has finished loading
      payload:
        type: object
        properties:
          success:
            type: integer
            enum: 
              - 0
              - 1
          width:
            type: integer
            description: The resolution width
          height:
            type: integer
            description: The resolution height
          scale:
            type: integer
            description: The game scale
    auth:
      name: auth
      summary: An event sent to authenticate the game session
      payload:
        type: object
        properties:
          auth:
            type: string
            description: The auth secret
          character:
            type: string
            description: The unique character game ID
          code_slot:
            type: string
            description: The unique code_slot game ID
        height: 
          type: string
          description: The resolution height
        no_graphics:
          type: string
          #TODO What is this?
        no_html:
          type: string
          #TODO What is this?
        passphrase:
          type: string
        scale: 
          type: integer
          description: The game scale
        user:
          type: string
          description: The unique User ID
        width:
          type: string
          description: The resolution width
        
    sbuy:
      name: sbuy
      summary: Second hand buy an item
      payload:
        type: object
        properties:
          rid: 
            type: string
            description: The unique identifier of teh item
          f:
            type: boolean
            #TODO What is this?
    donate:
      name: donate
      summary: Donate to the lost and found goblin
      payload:
        type: object
        properties:
          gold:
            type: integer
            description: The amount of gold to donate
    lostandfound:
      name: lostandfound
      summary: An event containing lostandfound items after being requested
      payload:
        type: array
        items:
          type: object
          properties:
            rid: 
              type: string
              description: The unique identifier of the item
            name:
              type: string
              description: The item name
            level:
              type: integer
              description: The items level
              optional: true
    lostandfound_info:
      name: lostandfound_info
      summary: Lost and found (goblin) operations. Provide no payload to request lostandfound items
      payload:
        type: string
        optional: true
        enum:
          - info
    ui:
      name: ui
      summary: UI text
      payload:
        oneOf:
          - $ref: '#/components/schemas/ui_vendor'
          - $ref: '#/components/schemas/ui_mluck'
          - $ref: '#/components/schemas/ui_gold_sent'
    target:
      name: target
      summary: Target an entity
      payload:
        type: object
        properties:
          id: 
            type: string
            description: A valid entity id
          xid:
            type: string
            description: The id of the player performing the target
    buy:
      name: buy
      summary: Purchase an item
      payload:
        type: object
        properties:
          name:
            type: string
            description: A valid item name
          quantity:
            type: integer
            description: The quantity to purchase

    bank:
      name: bank
      summary: Perform operations at the bank
      payload:
        $ref: '#/components/schemas/bank'
    upgrade:
      name: upgrade
      summary: Upgrade result message
      payload:
        type: object
        properties:
          type: 
            type: string
            enum: 
              - upgrade
              - exchange
          success:
            type: integer
            enum:
              - 0
              - 1

    move:
      name: move
      summary: Move the player to coordinates
      payload:
        $ref: '#/components/schemas/move'
    property:
      name: property
      summary: Set a player property on the server
      payload:
        type: object
        properties:
          afk: 
            type: boolean
            # TODO Are there more properties you can set?
    transport:
      name: transport
      summary: Request a transport to another map
      payload:
        type: object
        properties:
          to:
            $ref: '#/components/schemas/maps'
          s:
            type: integer
            #TODO What is this?

    ping_trig:
      name: ping_trig
      summary: A ping that requests a `ping_ack` response from the server. Can be used to determine latency
      payload:
        type: object
        properties:
          id:
            type: string
            description: A unique identifier used to identify the ping event.
    exchange_buy:
      name: exchange_buy
      summary: Purchase an item using exchangeable items
      payload:
        type: object
        properties:
          num:
            type: integer
            #TODO What is this?
          name: 
            type: string
            description: The name of the item being purchased
          q:
            type: integer
            description: The quantity being purchased
    start:
      name: start
      summary: An inital message upon character login containing player data
      payload:
        $ref: '#/components/schemas/player'
    welcome:
      name: welcome
      summary: Welcome message sent on a succesful login
      description: |
        A message sent after a succesful login, the welcome message contains information about the characters initial login coordinates, map and server
      payload:
        type: object
        $ref: '#/components/schemas/welcome'
      examples:
        - name: welcome
          summary: Example of a standard welcome message
          payload:
            - welcome
            -
              gameplay: normal
              in: "winterland"
              info: {}
              map: "winterland"
              name: "I"
              pvp: false
              region: "ASIA"
              x: 1235
              y: -737
    entities:
      name: entities
      summary: All entities in the current map within X distance
      payload:
        type: object
        $ref: '#/components/schemas/entities'
      #TODO add example
    action:
      name: action
      summary: An action by a character in the rendered area
      tags:
        -
          name: public
      payload:
        type: object
        $ref: '#/components/schemas/action'
      #TODO add example 
    sid:
      name: sid
      summary: A initial message sent when connecting to a server
      #TODO Fact check this and be more specific
      payload:
        type: object
        properties:
          pingInterval:
            type: integer
            #TODO description
          pingTimeout:
            type: integer
            #TODO description
          sid:
            type: string
            #TODO description
          upgrades:
            type: array
            #TODO description
            #TODO items
    hit:
      name: hit
      summary: An event containing data when an entity is hit
      tags:
        -
          name: public
      payload:
        type: object
        $ref: '#/components/schemas/hit'
      #TODO add example 
    ping_ack:
      name: ping_ack
      summary: A ping acknowledgement from the server, triggered from `ping_trig`
      payload:
        type: object
        properties:
          id: 
            type: string
            description: A unique identifier for the ping specified in the `ping_trig` request
      examples:
        - name: ping_ack
          summary: Example of a standard ping_ack
          payload:
              type: object
              id: "L3MpF"
    death:
      name: death
      summary: A death event from the server generated from surrounding entities
      payload:
        type: object
        properties:
          id: 
            type: string
            description: The ID of the entity that died
      examples:
        - name: death
          summary: Example of a standard death event
          payload: 
              type: object
              id: "7250984"
    server_info:
        name: server_info
        summary: Information about available events on the server
        payload:
          type: object
          oneOf:
            - $ref: '#/components/schemas/server_info'
            - 
              type: object
              description: Key value pairs used for server wide events
              patternProperties:
                "^S_":
                  type: boolean
    disappear:
      name: disappear
      summary: A character has disappeared from the map
      payload:
        $ref: '#/components/schemas/disappear'
    new_map:
      name: new_map
      summary: A new map has beeen loaded
      payload:
        $ref: '#/components/schemas/new_map'
    disappearing_text:
      name: disappearing_text
      summary: An event that is sent when disappearing text appears above a character
      payload:
        $ref: '#/components/schemas/disappearing_text'
    #TODO ui
    #TODO disappearing_text
  schemas:
    welcome:
      type: object
      properties:
            gameplay:
              type: string
              const: normal
            info:
              type: object
            map: 
              $ref: '#/components/schemas/maps'
            name: 
              $ref: '#/components/schemas/serverIdentifiers'
            pvp: 
              type: boolean
            region:
              $ref: '#/components/schemas/serverNames'
            x: 
              type: integer
            y: 
              type: integer
    mluck:
        type: object
        properties:
          ms:
            type: number
            description: The time in milliseconds remaining of the buff
          f: 
            type: string
            description: The player ID who applied the buff
          strong:
            type: boolean
            description: Denotes whether this buff is `strong` meaning it cannot be replaced with an identical buff from another player
    maps:
      type: string
      description: A valid game map
    serverIdentifiers:
      type: string
      description: A valid server identifier
      enum: ["I", "II", "III", "pvp"]
    serverNames:
      type: string
      description: A valid server name
      enum: ["ASIA", "US", "EU"]
    statTypes:
      type: string
      enum: ["int", "str", "dex", "vit"]
      #TODO add additional enum stat types
    item:
      type: object
      description: A standard item object
      properties: 
        name: 
          type: string
        level: 
          type: integer
        stat_type: 
          type: string
          description: The current stat type applied to the item from a scroll
          $ref: '#/components/schemas/statTypes'
          optional: true 
        acc: 
          type: integer
          description: The items achievement progress
        ach:
          type: string
          description: The items applied achievement name
        expires:
          type: string
          description: A timestamp that when reached, the item will be deleted
        gf:
          type: string
          description: The character that gifted the item to the player
        grace:
          type: integer
          description: An integer that denotes how likely a player is to success when attempting to upgrade or compound the item. A higher number means a higher change to succeed
        l:
          type: string
          description: Denotes whether the item is (l)ocked, (s)ealed or (u)nlocking
          enum: [l, s, u]
        ps:
          type: array
          description: An array of applicable titles for this item
          items:
            type: string
    player:
      type: object
      description: A standard player object
      properties:
        afk: 
          type: string
          description: Control method of the player
          enum: 
            - code
            - manual
        age:
          type: integer
          description: Age in days of player
        angle: 
          type: number
          description: Angle of the player
        armor: 
          type: integer
          description: The players armour score
        attack: 
          type: integer
          description: the players attack score
        c:
          type: object
          description: An object containing abilities the player is channeling
        cid:
          type: integer
          #TODO description
        controller: 
          type: string
          #TODO description
        ctype: 
          type: string
          description: The players class type
          enum: 
            - mage
            - warrior
            - priest
            - rogue
            - paladin
            - archer
            - merchant
        cx: 
          type: object
          description: An object containing the player applied customisations
        focus: 
          type: integer
          description: The focus target ID of the player
        frequency: 
          type: integer
          description: The players frequency score
        hp:
          type: integer
          description: The players current Health Points
        id: 
          type: string
          description: The players id (Doubles as the player name)
        level: 
          type: integer
          description: The players current level
        max_hp:
          type: integer
          description: The players maximum Health Points
        max_mp:
          type: integer
          description: The players maximum Mana Points
        mp:
          type: integer
          description: The players current Mana Points
        owner:
          type: string
          description: The owner ID of this player
        party:
          type: string
          description: The player ID of the players party leader
        pdps: 
          type: number
          description: The players DPS share whilst in the players current party
        q: 
          type: object
          properties: 
            compound: 
              type: object
              properties:
                len: 
                  type: number
                ms:
                  type: number
                num:
                  type: number
                nums:
                  type: array
                  items: 
                    type: number
            upgrade:
              type: object
              properties:
                len: 
                  type: number
                ms:
                  type: number
                num:
                  type: number
            exchange:
              type: object
              properties:
                len: 
                  type: number
                ms:
                  type: number
                # TODO Need additional variables
        range: 
          type: integer
          description: The players attack range
        resistance:
          type: integer
          description: The players resistance score
        rip: 
          type: boolean
          description: Denotes whether the character is currently dead
        s:
          type: object
          description: An object containing the players applied effects
          anyOf:
            - $ref: '#/components/schemas/mluck'
            #TODO add all effects
        skin: 
          type: string
          description: The ID of the skin applied to the player
        slots:
          type: object
          description: All currently equipped items on the player
          properties:
            itemName:
              type: object
              $ref: '#/components/schemas/item'
        speed: 
          type: integer
          description: The characters speed score
        target: 
          type: string
          description: The ID of the players current target
        x: 
          type: number
          description: The players x coordinate
        xp:
          type: integer
          description: The players accumulated xp at the current level
        y:
          type: number
          description: The players y coordinate
    monster:
      type: object
      description: A standard monster object
      properties:
        abs:
          type: boolean
        angle: 
          type: number
          description: Angle of the monster
        armor: 
          type: integer
          description: The monsters armour score
        cid:
          type: integer
          #TODO description
        going_x: 
          type: number
          description: The x coordinate on the monsters `map` the monster is currently moving to
        going_y:
          type: number
          description: The y coordinate on the monsters `map` the monster is currently moving to
          id: 
            type: string
            description: The ID of the monster
          move_num:
            type: integer
            #TODO description
          moving: 
            type: boolean
            description: Denotes whether the the monster is moving
          mp: 
            type: integer
            description: The monsters current mana points
          resistance:
            type: integer
            description: The monsters current resistance score
          s:
            type: object
            description: An object containing the monsters applied effects
            anyOf:
              - $ref: '#/components/schemas/mluck'
              #TODO add all effects
          Type:
            type: string
            description: The type of the monster
          x:
            type: number
            description: The current X coordinate of the monster
          y:
            type: number
            description: The current Y coordinate of the monster
    entities:
      type: object
      description: All surrounding entities
      properties:
        in: 
          type: string
          $ref: '#/components/schemas/maps'
        map: 
          type: string
          $ref: '#/components/schemas/maps' 
        players: 
          type: array
          items: 
            $ref: '#/components/schemas/player'
        monsters:
          type: array
          items:
            $ref: '#/components/schemas/monster'
        type:
          type: string
          enum: ["all", "xy"]
    action:
      type: object
      description: A standard action
      properties:
        attacker:
          type: string
          description: The ID of the player performing the action
        damage:
          type: integer
          description: The amount of damage the action has calculated
        eta: 
          type: integer
          #TODO description
        m: 
          type: integer
          #TODO description
        pid: 
          type: string
          description: The actions unique identifier
        projectile:
          type: string
          description: The type of projectile for this action (if any)
        source:
          type: string
          description: The origin or trigger of this action
        target:
          type: string
          description: the target ID of this action
        type:
          type: string
          description: The type of this action
        x: 
          type: number
          description: The origin X coordinate of this action
          #TODO Fact check this
        y:
          type: number
          description: The origin Y coordinate of this action
    hit:
      type: object
      description: A standard hit event
      properties:
        anim:
          type: string
          description: The name of the animation
        damage: 
          type: integer
          description: The damage applied to the target `hid`
        hid:
          type: string
          description: The ID of the entity effected by the hit
        kill:
          type: boolean
          description: Denotes whether this hit killed the target `hid`
        lifesteal: 
          type: integer
          description: Life stolen by this hit
          #TODO fact check
        pid:
          type: string
          description: The unique identifier of this hit event
        projectile: 
          type: string
          description: The name of the projectile sprite to use for this hit
        source:
          type: string
          description: The source that triggered this hit
    server_info:
      description: Information about all available events on the server
      properties:
        hp: 
          type: integer
          description: The event boss's current HP
        live: 
          type: boolean
          description: Denotes whether the event is live
        map:
          $ref: '#/components/schemas/maps'
          description: The map the event is in
        max_hp: 
          type: integer
          description: The event boss's maximum hp
        x:
          type: number
          description: The event boss's X coordinate location on the map
        y:
          type: number
          description: The event boss's Y coordinate location on the map
        spawn:
          type: string
          description: The server time of the next event start time
    disappear:
      type: object
      description: A character has disappeared
      properties:
        id:
          type: string
          description: The id of the character that has disappeared
          optional: true
        reason: 
          type: string
          enum:
            - transport
        s:
          type: integer
          description: Count of applied effects to the transport
          #TODO Fact check this? What is this?
        to:
          description: The map the character has moved to
          $ref: '#/components/schemas/maps'
        effect:
          type: string
          enum: 
            - blink
          optional: true
    new_map:
      type: object
      description: A new map has been loaded
      properties:
        direction:
          type: integer
        effect:
          type: integer
        entities:
          $ref: '#/components/schemas/entities'
        eval:
          type: string
        in:
          description: The new map the character has entered
          $ref: '#/components/schemas/maps'
        info:
          type: object
        name:
          type: string
          description: The new map name
        m:
          type: integer
          #TODO what is this?
        x:
          type: integer
          description: The new X coordinate of the character
        y:
          type: integer
          description: The new Y coordinate of the character
    disappearing_text:
      type: object
      properties:
        args:
          type: object
          properties:
            c:
              type: string
              description: The HEX color value of the text
            s:
              type: string
              description: The disappearing text effect
        id: 
          type: string
          description: The character the disappearing text is applied to
        message:
          type: string
          description: The disappearing text value
        x:
          type: number
          description: The X coordinate the text appears at
        y:
          type: number
          description: The Y coordinate the text appears at
    move:
      type: object
      properties:
        x:
          type: number
          description: The origin X coordinate of the move
        y:
          type: number
          description: The origin Y coordinate of the move
        going_x:
          type: number
          description: The destination X coordinate of the move
        going_y:
          type: number
          description: The destination Y coordinate of the move
        m:
          type: integer
          #TODO What is this?
    bank:
      type: object
      properties:
        operation:
          type: string
          enum: 
            - swap
          description: The operation being performed at the bank
        inv:
          type: integer
          description: The player inventory slot to swap
        str:
          type: integer
          description: The bank slot to swap
        pack:
          $ref: '#/components/schemas/bank_pack'
    bank_pack:
      type: string
      description: A valid bank pack name
      enum:
        - items0
        - items1
        - items2
        - items3
        # TODO More?
    ui_vendor:
      type: object
      description: Sent when something is purchased or sold to a vendor
      properties:
        type:
          type: string
          const: '+$'
        id:
          type: string
          description: The ID of the player or entity triggering the UI text
        name:
          type: string
          description: The id of the player that triggered the UI Text
        item:
          type: object
          optional: true
          properties:
            name:
              type: string
              description: The item name
            q:
              type: integer
              description: The quantity of the item
    ui_gold_sent:
      type: object
      description: Sent when gold is sent to a player
      properties:
        type:
          type: string
          const: gold_sent
        receiver:
          type: string
          description: The player ID of the player receiving the gold
        sender:
          type: string
          description: The player ID of the player sending the gold
        gold:
          type: string
          description: The amount of gold transferred
    ui_mluck:
      type: object
      description: Sent when a player is mlucked
      properties:
        from:
          type: string
          description: The player ID of the player casting mluck
        to:
          type: string
          description: The payer ID of the player targeted by the mluck cast
    game_response_lostandfound_donate:
      type: string
      description: A resonse returned when lostandfound is requested, but the required donation has not been provided
      const: lostandfound_donate
    game_response_lostandfound_info:
      type: object
      description: A response returned when lostandfound info is requested
      properties:
        response:
          type: string
          const: lostandfound_info
        gold:
          type: number
          description: The amount of gold lostandfound has
          #TODO Fact check this?
    game_response_craft:
      type: object
      description: A response returned when an item is crafted by the player
      properties:
        response:
          type: string
          const: craft
        name:
          type: string
          description: The item that has been crafted